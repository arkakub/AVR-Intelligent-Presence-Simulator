
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  000005c4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000f0  008000f0  000006e8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e4b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000103f  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039b  00000000  00000000  00001f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000574  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000012c  00000000  00000000  00002850  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000021f  00000000  00000000  0000297c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000585  00000000  00000000  00002b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00003120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	87 c2       	rjmp	.+1294   	; 0x51c <__vector_6>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ec       	ldi	r30, 0xC4	; 196
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 3f       	cpi	r26, 0xF0	; 240
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 ef       	ldi	r26, 0xF0	; 240
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 3f       	cpi	r26, 0xF5	; 245
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	07 d1       	rcall	.+526    	; 0x268 <main>
  5a:	b2 c2       	rjmp	.+1380   	; 0x5c0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
  5e:	81 b3       	in	r24, 0x11	; 17
  60:	80 7f       	andi	r24, 0xF0	; 240
  62:	81 bb       	out	0x11, r24	; 17

	//change LCD mode
	SET_RW();		//Read mode
  64:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
  66:	96 98       	cbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	82 e0       	ldi	r24, 0x02	; 2
  6a:	8a 95       	dec	r24
  6c:	f1 f7       	brne	.-4      	; 0x6a <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
  6e:	94 9a       	sbi	0x12, 4	; 18
  70:	92 e0       	ldi	r25, 0x02	; 2
  72:	9a 95       	dec	r25
  74:	f1 f7       	brne	.-4      	; 0x72 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
  76:	80 b3       	in	r24, 0x10	; 16
		status=status<<4;
  78:	82 95       	swap	r24
  7a:	80 7f       	andi	r24, 0xF0	; 240
  7c:	92 e0       	ldi	r25, 0x02	; 2
  7e:	9a 95       	dec	r25
  80:	f1 f7       	brne	.-4      	; 0x7e <LCDBusyLoop+0x20>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  82:	94 98       	cbi	0x12, 4	; 18
  84:	94 e0       	ldi	r25, 0x04	; 4
  86:	9a 95       	dec	r25
  88:	f1 f7       	brne	.-4      	; 0x86 <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL

		SET_E();
  8a:	94 9a       	sbi	0x12, 4	; 18
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	9a 95       	dec	r25
  90:	f1 f7       	brne	.-4      	; 0x8e <LCDBusyLoop+0x30>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
  92:	90 b3       	in	r25, 0x10	; 16
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	9a 95       	dec	r25
  98:	f1 f7       	brne	.-4      	; 0x96 <LCDBusyLoop+0x38>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  9a:	94 98       	cbi	0x12, 4	; 18
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCDBusyLoop+0x40>
		_delay_us(1);	//tEL
	}while(busy);
  a2:	88 23       	and	r24, r24
  a4:	24 f3       	brlt	.-56     	; 0x6e <LCDBusyLoop+0x10>

	CLEAR_RW();		//write mode
  a6:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	8f 60       	ori	r24, 0x0F	; 15
  ac:	81 bb       	out	0x11, r24	; 17
  ae:	08 95       	ret

000000b0 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  b0:	28 2f       	mov	r18, r24
  b2:	22 95       	swap	r18
  b4:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
  b6:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
  b8:	61 11       	cpse	r22, r1
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <LCDByte+0x10>
	CLEAR_RS();
  bc:	96 98       	cbi	0x12, 6	; 18
  be:	01 c0       	rjmp	.+2      	; 0xc2 <LCDByte+0x12>
else
	SET_RS();
  c0:	96 9a       	sbi	0x12, 6	; 18
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCDByte+0x14>

_delay_us(0.500);		//tAS

SET_E();
  c8:	94 9a       	sbi	0x12, 4	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
  ca:	92 b3       	in	r25, 0x12	; 18
  cc:	90 7f       	andi	r25, 0xF0	; 240
  ce:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
  d0:	92 bb       	out	0x12, r25	; 18
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	9a 95       	dec	r25
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
  d8:	94 98       	cbi	0x12, 4	; 18
  da:	94 e0       	ldi	r25, 0x04	; 4
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
  e0:	94 9a       	sbi	0x12, 4	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
  e2:	92 b3       	in	r25, 0x12	; 18
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <LCDByte+0x3c>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
  f0:	94 98       	cbi	0x12, 4	; 18
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDByte+0x44>

_delay_us(1);			//tEL

LCDBusyLoop();
  f8:	b2 df       	rcall	.-156    	; 0x5e <LCDBusyLoop>
  fa:	08 95       	ret

000000fc <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
  fc:	cf 93       	push	r28
  fe:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f e3       	ldi	r18, 0x3F	; 63
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <InitLCD+0xa>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <InitLCD+0x14>
 110:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 112:	81 b3       	in	r24, 0x11	; 17
 114:	8f 60       	ori	r24, 0x0F	; 15
 116:	81 bb       	out	0x11, r24	; 17
	LCD_E_DDR|=(1<<LCD_E_POS);
 118:	8c 9a       	sbi	0x11, 4	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 11a:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 11c:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	82 bb       	out	0x12, r24	; 18
	CLEAR_E();
 124:	94 98       	cbi	0x12, 4	; 18
	CLEAR_RW();
 126:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 128:	96 98       	cbi	0x12, 6	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	00 c0       	rjmp	.+0      	; 0x12c <InitLCD+0x30>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <InitLCD+0x32>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 12e:	94 9a       	sbi	0x12, 4	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 130:	91 9a       	sbi	0x12, 1	; 18
 132:	24 e0       	ldi	r18, 0x04	; 4
 134:	2a 95       	dec	r18
 136:	f1 f7       	brne	.-4      	; 0x134 <InitLCD+0x38>
	_delay_us(1);
	CLEAR_E();
 138:	94 98       	cbi	0x12, 4	; 18
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <InitLCD+0x40>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 140:	8e df       	rcall	.-228    	; 0x5e <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	8c 2f       	mov	r24, r28
 146:	8c 60       	ori	r24, 0x0C	; 12
 148:	b3 df       	rcall	.-154    	; 0xb0 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	88 e2       	ldi	r24, 0x28	; 40
 14e:	b0 df       	rcall	.-160    	; 0xb0 <LCDByte>
}
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 15a:	88 81       	ld	r24, Y
 15c:	88 23       	and	r24, r24
 15e:	31 f0       	breq	.+12     	; 0x16c <LCDWriteString+0x18>
	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
}
void LCDWriteString(const char *msg)
 160:	21 96       	adiw	r28, 0x01	; 1


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	a5 df       	rcall	.-182    	; 0xb0 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 166:	89 91       	ld	r24, Y+
 168:	81 11       	cpse	r24, r1
 16a:	fb cf       	rjmp	.-10     	; 0x162 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <LCDWriteInt+0xe>
 180:	00 d0       	rcall	.+0      	; 0x182 <LCDWriteInt+0x10>
 182:	1f 92       	push	r1
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 18a:	fe 01       	movw	r30, r28
 18c:	31 96       	adiw	r30, 0x01	; 1
 18e:	25 e0       	ldi	r18, 0x05	; 5
 190:	df 01       	movw	r26, r30
 192:	1d 92       	st	X+, r1
 194:	2a 95       	dec	r18
 196:	e9 f7       	brne	.-6      	; 0x192 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	59 f0       	breq	.+22     	; 0x1b2 <LCDWriteInt+0x40>
 19c:	fe 01       	movw	r30, r28
 19e:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
 1a0:	2a e0       	ldi	r18, 0x0A	; 10
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	b9 01       	movw	r22, r18
 1a6:	e5 d1       	rcall	.+970    	; 0x572 <__divmodhi4>
 1a8:	82 93       	st	-Z, r24
	val=val/10;
 1aa:	86 2f       	mov	r24, r22
 1ac:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	c9 f7       	brne	.-14     	; 0x1a4 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1b2:	bf ef       	ldi	r27, 0xFF	; 255
 1b4:	eb 16       	cp	r14, r27
 1b6:	fb 06       	cpc	r15, r27
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <LCDWriteInt+0x62>
		while(str[j]==0) j++;
 1ba:	29 81       	ldd	r18, Y+1	; 0x01
 1bc:	21 11       	cpse	r18, r1
 1be:	0f c0       	rjmp	.+30     	; 0x1de <LCDWriteInt+0x6c>
 1c0:	fe 01       	movw	r30, r28
 1c2:	32 96       	adiw	r30, 0x02	; 2
 1c4:	00 e0       	ldi	r16, 0x00	; 0
 1c6:	10 e0       	ldi	r17, 0x00	; 0
 1c8:	0f 5f       	subi	r16, 0xFF	; 255
 1ca:	1f 4f       	sbci	r17, 0xFF	; 255
 1cc:	21 91       	ld	r18, Z+
 1ce:	22 23       	and	r18, r18
 1d0:	d9 f3       	breq	.-10     	; 0x1c8 <LCDWriteInt+0x56>
 1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <LCDWriteInt+0x70>
	else
		j=5-field_length;
 1d4:	05 e0       	ldi	r16, 0x05	; 5
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	0e 19       	sub	r16, r14
 1da:	1f 09       	sbc	r17, r15
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <LCDWriteInt+0x70>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
 1e2:	99 23       	and	r25, r25
 1e4:	1c f4       	brge	.+6      	; 0x1ec <LCDWriteInt+0x7a>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	8d e2       	ldi	r24, 0x2D	; 45
 1ea:	62 df       	rcall	.-316    	; 0xb0 <LCDByte>
	for(i=j;i<5;i++)
 1ec:	05 30       	cpi	r16, 0x05	; 5
 1ee:	11 05       	cpc	r17, r1
 1f0:	9c f4       	brge	.+38     	; 0x218 <LCDWriteInt+0xa6>
	LCDData(*msg);
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1f2:	e1 e0       	ldi	r30, 0x01	; 1
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ec 0f       	add	r30, r28
 1f8:	fd 1f       	adc	r31, r29
 1fa:	0e 0f       	add	r16, r30
 1fc:	1f 1f       	adc	r17, r31
 1fe:	7e 01       	movw	r14, r28
 200:	f6 e0       	ldi	r31, 0x06	; 6
 202:	ef 0e       	add	r14, r31
 204:	f1 1c       	adc	r15, r1
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 206:	d8 01       	movw	r26, r16
 208:	8d 91       	ld	r24, X+
 20a:	8d 01       	movw	r16, r26
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	80 5d       	subi	r24, 0xD0	; 208
 210:	4f df       	rcall	.-354    	; 0xb0 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 212:	0e 15       	cp	r16, r14
 214:	1f 05       	cpc	r17, r15
 216:	b9 f7       	brne	.-18     	; 0x206 <LCDWriteInt+0x94>
	{
	LCDData(48+str[i]);
	}
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	1f 91       	pop	r17
 228:	0f 91       	pop	r16
 22a:	ff 90       	pop	r15
 22c:	ef 90       	pop	r14
 22e:	08 95       	ret

00000230 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 230:	88 32       	cpi	r24, 0x28	; 40
 232:	28 f4       	brcc	.+10     	; 0x23e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 234:	61 11       	cpse	r22, r1
 236:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	39 df       	rcall	.-398    	; 0xb0 <LCDByte>
 23e:	08 95       	ret

00000240 <Wait>:

void Wait(uint8_t n)
{

	uint8_t i,temp;
	temp=n*28;
 240:	9c e1       	ldi	r25, 0x1C	; 28
 242:	89 9f       	mul	r24, r25
 244:	80 2d       	mov	r24, r0
 246:	11 24       	eor	r1, r1

	for(i=0;i<temp;i++)
 248:	88 23       	and	r24, r24
 24a:	49 f0       	breq	.+18     	; 0x25e <Wait+0x1e>
 24c:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Wait+0x14>
 258:	9f 5f       	subi	r25, 0xFF	; 255
 25a:	98 13       	cpse	r25, r24
 25c:	fa cf       	rjmp	.-12     	; 0x252 <Wait+0x12>
 25e:	08 95       	ret

00000260 <LoadOn>:
	_delay_loop_2(0);
}

void LoadOn()
{
	LOAD_PORT|=(1<<LOAD_POS);
 260:	a8 9a       	sbi	0x15, 0	; 21
 262:	08 95       	ret

00000264 <LoadOff>:
}

void LoadOff()
{
	LOAD_PORT&=(~(1<<LOAD_POS));
 264:	a8 98       	cbi	0x15, 0	; 21
 266:	08 95       	ret

00000268 <main>:
		//Clear the display
		LCDClear();

		//Set up the timer1 as described in the
		//tutorial
		TCCR1B=(1<<WGM12)|(1<<CS11)|(1<<CS10);
 268:	0f 2e       	mov	r0, r31
 26a:	fb e0       	ldi	r31, 0x0B	; 11
 26c:	ff 2e       	mov	r15, r31
 26e:	f0 2d       	mov	r31, r0
		OCR1A=250;
 270:	0f 2e       	mov	r0, r31
 272:	fa ef       	ldi	r31, 0xFA	; 250
 274:	af 2e       	mov	r10, r31
 276:	b1 2c       	mov	r11, r1
 278:	f0 2d       	mov	r31, r0
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0

					//Hour is selected so decrement it
					hr--;

					if(hr == -1)
					hr =99;
 27e:	0f 2e       	mov	r0, r31
 280:	f3 e6       	ldi	r31, 0x63	; 99
 282:	ef 2e       	mov	r14, r31
 284:	f0 2d       	mov	r31, r0
int main()
{

	while(1)
	{
		LOAD_DDR|=(1<<LOAD_POS);
 286:	a0 9a       	sbi	0x14, 0	; 20

		LoadOff();
 288:	ed df       	rcall	.-38     	; 0x264 <LoadOff>

		//Enable Pullups on Keypad
		PORTB|=((1<<PB2)|(1<<PB1)|(1<<PB0));
 28a:	88 b3       	in	r24, 0x18	; 24
 28c:	87 60       	ori	r24, 0x07	; 7
 28e:	88 bb       	out	0x18, r24	; 24

		int8_t hr,min;	//Target Time
		hr=min=0;

		//Initialize the LCD Subsystem
		InitLCD(0);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	34 df       	rcall	.-408    	; 0xfc <InitLCD>
		//Clear the display
		LCDClear();
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0b df       	rcall	.-490    	; 0xb0 <LCDByte>

		//Set up the timer1 as described in the
		//tutorial
		TCCR1B=(1<<WGM12)|(1<<CS11)|(1<<CS10);
 29a:	fe bc       	out	0x2e, r15	; 46
		OCR1A=250;
 29c:	bb bc       	out	0x2b, r11	; 43
 29e:	aa bc       	out	0x2a, r10	; 42

		//Enable the Output Compare A interrupt
		TIMSK|=(1<<OCIE1A);
 2a0:	89 b7       	in	r24, 0x39	; 57
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	89 bf       	out	0x39, r24	; 57

		//Enable interrupts globally
		sei();
 2a6:	78 94       	sei

		LCDClear();
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	01 df       	rcall	.-510    	; 0xb0 <LCDByte>
		LCDWriteString("    Welcome     ");
 2ae:	80 e6       	ldi	r24, 0x60	; 96
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	50 df       	rcall	.-352    	; 0x154 <LCDWriteString>
		LCDWriteStringXY(0,1,"   Relay Timer  ");
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	bb df       	rcall	.-138    	; 0x230 <LCDGotoXY>
 2ba:	81 e7       	ldi	r24, 0x71	; 113
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	4a df       	rcall	.-364    	; 0x154 <LCDWriteString>

		Wait(4);
 2c0:	84 e0       	ldi	r24, 0x04	; 4
 2c2:	be df       	rcall	.-132    	; 0x240 <Wait>

		LCDClear();
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	f3 de       	rcall	.-538    	; 0xb0 <LCDByte>
		LCDWriteString("Set Time - 00:00");
 2ca:	82 e8       	ldi	r24, 0x82	; 130
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	42 df       	rcall	.-380    	; 0x154 <LCDWriteString>
		LCDWriteStringXY(0,1," Start     ^");
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	ad df       	rcall	.-166    	; 0x230 <LCDGotoXY>
 2d6:	83 e9       	ldi	r24, 0x93	; 147
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	3c df       	rcall	.-392    	; 0x154 <LCDWriteString>

		uint8_t selection=1;
		uint8_t old_pinb=PINB;
 2dc:	d6 b2       	in	r13, 0x16	; 22

		LCDClear();
		LCDWriteString("Set Time - 00:00");
		LCDWriteStringXY(0,1," Start     ^");

		uint8_t selection=1;
 2de:	11 e0       	ldi	r17, 0x01	; 1

		//Enable Pullups on Keypad
		PORTB|=((1<<PB2)|(1<<PB1)|(1<<PB0));

		int8_t hr,min;	//Target Time
		hr=min=0;
 2e0:	c1 2c       	mov	r12, r1
 2e2:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t selection=1;
		uint8_t old_pinb=PINB;

		while(1)
		{
			while((PINB & 0b00000111) == (old_pinb & 0b00000111));
 2e4:	86 b3       	in	r24, 0x16	; 22
 2e6:	8d 25       	eor	r24, r13
 2e8:	87 70       	andi	r24, 0x07	; 7
 2ea:	e1 f3       	breq	.-8      	; 0x2e4 <main+0x7c>
			
			//Input received


			if(!(PINB & (1<<PINB2)) && (old_pinb & (1<<PB2)))
 2ec:	b2 99       	sbic	0x16, 2	; 22
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <main+0x94>
 2f0:	d2 fe       	sbrs	r13, 2
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <main+0x94>
			{
				//Selection key Pressed
				selection++;
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
				if(selection==3)
 2f6:	13 30       	cpi	r17, 0x03	; 3
 2f8:	09 f4       	brne	.+2      	; 0x2fc <main+0x94>
				selection =0;
 2fa:	10 e0       	ldi	r17, 0x00	; 0
			}

			if(!(PINB & (1<<PINB1)) && (old_pinb & (1<<PB1)))
 2fc:	b1 99       	sbic	0x16, 1	; 22
 2fe:	12 c0       	rjmp	.+36     	; 0x324 <main+0xbc>
 300:	d1 fe       	sbrs	r13, 1
 302:	10 c0       	rjmp	.+32     	; 0x324 <main+0xbc>
			{
				//Up Key Pressed
				if(selection == 1)
 304:	11 30       	cpi	r17, 0x01	; 1
 306:	21 f4       	brne	.+8      	; 0x310 <main+0xa8>
				{
					
					//Hour is selected so increment it
					hr++;
 308:	0f 5f       	subi	r16, 0xFF	; 255

					if(hr == 100)
 30a:	04 36       	cpi	r16, 0x64	; 100
 30c:	59 f4       	brne	.+22     	; 0x324 <main+0xbc>
 30e:	da c0       	rjmp	.+436    	; 0x4c4 <__stack+0x65>
					hr =0;
				}

				if(selection == 2)
 310:	12 30       	cpi	r17, 0x02	; 2
 312:	29 f4       	brne	.+10     	; 0x31e <main+0xb6>
				{

					//Min is selected so increment it
					min++;
 314:	c3 94       	inc	r12

					if(min == 60)
 316:	8c e3       	ldi	r24, 0x3C	; 60
 318:	c8 12       	cpse	r12, r24
 31a:	04 c0       	rjmp	.+8      	; 0x324 <main+0xbc>
 31c:	d5 c0       	rjmp	.+426    	; 0x4c8 <__stack+0x69>
					min =0;
				}

				if(selection == 0)
 31e:	11 23       	and	r17, r17
 320:	09 f4       	brne	.+2      	; 0x324 <main+0xbc>
 322:	68 c0       	rjmp	.+208    	; 0x3f4 <main+0x18c>
				}


			}

			if(!(PINB & (1<<PINB0)) && (old_pinb & (1<<PB0)))
 324:	b0 99       	sbic	0x16, 0	; 22
 326:	12 c0       	rjmp	.+36     	; 0x34c <main+0xe4>
 328:	d0 fe       	sbrs	r13, 0
 32a:	10 c0       	rjmp	.+32     	; 0x34c <main+0xe4>
			{
				//Down Key Pressed
				if(selection == 1)
 32c:	11 30       	cpi	r17, 0x01	; 1
 32e:	21 f4       	brne	.+8      	; 0x338 <main+0xd0>
				{

					//Hour is selected so decrement it
					hr--;
 330:	01 50       	subi	r16, 0x01	; 1
 332:	08 f0       	brcs	.+2      	; 0x336 <main+0xce>
 334:	d1 c0       	rjmp	.+418    	; 0x4d8 <__stack+0x79>
 336:	ca c0       	rjmp	.+404    	; 0x4cc <__stack+0x6d>

					if(hr == -1)
					hr =99;
				}

				if(selection == 2)
 338:	12 30       	cpi	r17, 0x02	; 2
 33a:	29 f4       	brne	.+10     	; 0x346 <main+0xde>
				{

					//Min is selected so decrement it
					min--;
 33c:	ca 94       	dec	r12

					if(min == -1)
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	c8 12       	cpse	r12, r24
 342:	ca c0       	rjmp	.+404    	; 0x4d8 <__stack+0x79>
 344:	c5 c0       	rjmp	.+394    	; 0x4d0 <__stack+0x71>
					min =59;
				}

				if(selection == 0)
 346:	11 11       	cpse	r17, r1
 348:	c7 c0       	rjmp	.+398    	; 0x4d8 <__stack+0x79>
 34a:	54 c0       	rjmp	.+168    	; 0x3f4 <main+0x18c>
				}

			}

			
			old_pinb=PINB;
 34c:	d6 b2       	in	r13, 0x16	; 22

			

			//Update Display
			LCDClear();
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	ae de       	rcall	.-676    	; 0xb0 <LCDByte>
			LCDWriteString("Set Time - 00:00");
 354:	82 e8       	ldi	r24, 0x82	; 130
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fd de       	rcall	.-518    	; 0x154 <LCDWriteString>
			LCDWriteStringXY(0,1," Start    ");
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	68 df       	rcall	.-304    	; 0x230 <LCDGotoXY>
 360:	80 ea       	ldi	r24, 0xA0	; 160
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	f7 de       	rcall	.-530    	; 0x154 <LCDWriteString>

			//Hour
			LCDWriteIntXY(11,0,hr,2);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	8f 2d       	mov	r24, r15
 36a:	62 df       	rcall	.-316    	; 0x230 <LCDGotoXY>
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	80 2f       	mov	r24, r16
 372:	99 27       	eor	r25, r25
 374:	87 fd       	sbrc	r24, 7
 376:	90 95       	com	r25
 378:	fc de       	rcall	.-520    	; 0x172 <LCDWriteInt>

			//Minute
			LCDWriteIntXY(14,0,min,2);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	8e e0       	ldi	r24, 0x0E	; 14
 37e:	58 df       	rcall	.-336    	; 0x230 <LCDGotoXY>
 380:	62 e0       	ldi	r22, 0x02	; 2
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	8c 2d       	mov	r24, r12
 386:	99 27       	eor	r25, r25
 388:	87 fd       	sbrc	r24, 7
 38a:	90 95       	com	r25
 38c:	f2 de       	rcall	.-540    	; 0x172 <LCDWriteInt>

			if(selection == 0)
 38e:	11 11       	cpse	r17, r1
 390:	07 c0       	rjmp	.+14     	; 0x3a0 <main+0x138>
			LCDWriteStringXY(0,1,">");
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	4c df       	rcall	.-360    	; 0x230 <LCDGotoXY>
 398:	8b ea       	ldi	r24, 0xAB	; 171
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	db de       	rcall	.-586    	; 0x154 <LCDWriteString>
 39e:	11 c0       	rjmp	.+34     	; 0x3c2 <main+0x15a>
			
			if(selection == 1)
 3a0:	11 30       	cpi	r17, 0x01	; 1
 3a2:	39 f4       	brne	.+14     	; 0x3b2 <main+0x14a>
			LCDWriteStringXY(11,1,"^");
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	8f 2d       	mov	r24, r15
 3a8:	43 df       	rcall	.-378    	; 0x230 <LCDGotoXY>
 3aa:	8e e9       	ldi	r24, 0x9E	; 158
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	d2 de       	rcall	.-604    	; 0x154 <LCDWriteString>
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <main+0x15a>

			if(selection == 2)
 3b2:	12 30       	cpi	r17, 0x02	; 2
 3b4:	31 f4       	brne	.+12     	; 0x3c2 <main+0x15a>
			LCDWriteStringXY(14,1,"^");
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	8e e0       	ldi	r24, 0x0E	; 14
 3ba:	3a df       	rcall	.-396    	; 0x230 <LCDGotoXY>
 3bc:	8e e9       	ldi	r24, 0x9E	; 158
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	c9 de       	rcall	.-622    	; 0x154 <LCDWriteString>
 3c2:	ce 01       	movw	r24, r28
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <main+0x15c>
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <main+0x162>
 3ce:	ce 01       	movw	r24, r28
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <main+0x168>
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <main+0x16e>
 3da:	ce 01       	movw	r24, r28
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x174>
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <main+0x17a>
 3e6:	fe 01       	movw	r30, r28
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x180>
 3ec:	fe 01       	movw	r30, r28
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x186>
 3f2:	78 cf       	rjmp	.-272    	; 0x2e4 <main+0x7c>
			_delay_loop_2(0);
			_delay_loop_2(0);
		}

		//Start the Load
		LoadOn();
 3f4:	35 df       	rcall	.-406    	; 0x260 <LoadOn>


		//Now start the timer
		clock_hour = hr;
 3f6:	00 93 f0 00 	sts	0x00F0, r16
		clock_minute = min;
 3fa:	c0 92 f1 00 	sts	0x00F1, r12
		clock_second =0;
 3fe:	10 92 f2 00 	sts	0x00F2, r1


		LCDClear();
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	54 de       	rcall	.-856    	; 0xb0 <LCDByte>
		LCDWriteString("  Power Off In ");
 408:	8d ea       	ldi	r24, 0xAD	; 173
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	a3 de       	rcall	.-698    	; 0x154 <LCDWriteString>
		

		while(1)
		{
			LCDWriteIntXY(4,1,clock_hour,2);
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	0e df       	rcall	.-484    	; 0x230 <LCDGotoXY>
 414:	80 91 f0 00 	lds	r24, 0x00F0
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	a9 de       	rcall	.-686    	; 0x172 <LCDWriteInt>
			LCDWriteString(":");
 420:	8d eb       	ldi	r24, 0xBD	; 189
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	97 de       	rcall	.-722    	; 0x154 <LCDWriteString>
			LCDWriteIntXY(7,1,clock_minute,2);
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	02 df       	rcall	.-508    	; 0x230 <LCDGotoXY>
 42c:	80 91 f1 00 	lds	r24, 0x00F1
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	9d de       	rcall	.-710    	; 0x172 <LCDWriteInt>
			LCDWriteString(":");
 438:	8d eb       	ldi	r24, 0xBD	; 189
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	8b de       	rcall	.-746    	; 0x154 <LCDWriteString>
			LCDWriteIntXY(10,1,clock_second,2);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	8a e0       	ldi	r24, 0x0A	; 10
 442:	f6 de       	rcall	.-532    	; 0x230 <LCDGotoXY>
 444:	80 91 f2 00 	lds	r24, 0x00F2
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	91 de       	rcall	.-734    	; 0x172 <LCDWriteInt>

			if((clock_hour == 0) && (clock_minute == 0) && (clock_second == 0))
 450:	80 91 f0 00 	lds	r24, 0x00F0
 454:	81 11       	cpse	r24, r1
 456:	29 c0       	rjmp	.+82     	; 0x4aa <__stack+0x4b>
 458:	80 91 f1 00 	lds	r24, 0x00F1
 45c:	81 11       	cpse	r24, r1
 45e:	25 c0       	rjmp	.+74     	; 0x4aa <__stack+0x4b>
 460:	80 91 f2 00 	lds	r24, 0x00F2
 464:	81 11       	cpse	r24, r1
 466:	21 c0       	rjmp	.+66     	; 0x4aa <__stack+0x4b>
			{
				//Time Out
				LoadOff();
 468:	fd de       	rcall	.-518    	; 0x264 <LoadOff>

				LCDClear();
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	20 de       	rcall	.-960    	; 0xb0 <LCDByte>
				LCDWriteString("Load Turned Off");
 470:	8f eb       	ldi	r24, 0xBF	; 191
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	6f de       	rcall	.-802    	; 0x154 <LCDWriteString>
				
				while(1)
				{
					LCDWriteStringXY(0,1,"*Press Any Key*");
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	da de       	rcall	.-588    	; 0x230 <LCDGotoXY>
 47c:	8f ec       	ldi	r24, 0xCF	; 207
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	69 de       	rcall	.-814    	; 0x154 <LCDWriteString>

					Wait(1);
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	dd de       	rcall	.-582    	; 0x240 <Wait>

					LCDWriteStringXY(0,1,"                ");
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	d2 de       	rcall	.-604    	; 0x230 <LCDGotoXY>
 48c:	8f ed       	ldi	r24, 0xDF	; 223
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	61 de       	rcall	.-830    	; 0x154 <LCDWriteString>

					Wait(1);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	d5 de       	rcall	.-598    	; 0x240 <Wait>

					if((~PINB) & 0b00000111) break;
 496:	86 b3       	in	r24, 0x16	; 22
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	80 95       	com	r24
 49c:	90 95       	com	r25
 49e:	87 70       	andi	r24, 0x07	; 7
 4a0:	99 27       	eor	r25, r25
 4a2:	89 2b       	or	r24, r25
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__stack+0x49>
 4a6:	ef ce       	rjmp	.-546    	; 0x286 <main+0x1e>
 4a8:	e6 cf       	rjmp	.-52     	; 0x476 <__stack+0x17>
 4aa:	fe 01       	movw	r30, r28
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__stack+0x4d>
 4b0:	fe 01       	movw	r30, r28
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__stack+0x53>
 4b6:	fe 01       	movw	r30, r28
 4b8:	31 97       	sbiw	r30, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__stack+0x59>
 4bc:	fe 01       	movw	r30, r28
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <__stack+0x5f>
 4c2:	a5 cf       	rjmp	.-182    	; 0x40e <main+0x1a6>
					
					//Hour is selected so increment it
					hr++;

					if(hr == 100)
					hr =0;
 4c4:	00 e0       	ldi	r16, 0x00	; 0
 4c6:	2e cf       	rjmp	.-420    	; 0x324 <main+0xbc>

					//Min is selected so increment it
					min++;

					if(min == 60)
					min =0;
 4c8:	c1 2c       	mov	r12, r1
 4ca:	2c cf       	rjmp	.-424    	; 0x324 <main+0xbc>

					//Hour is selected so decrement it
					hr--;

					if(hr == -1)
					hr =99;
 4cc:	0e 2d       	mov	r16, r14
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__stack+0x79>

					//Min is selected so decrement it
					min--;

					if(min == -1)
					min =59;
 4d0:	0f 2e       	mov	r0, r31
 4d2:	fb e3       	ldi	r31, 0x3B	; 59
 4d4:	cf 2e       	mov	r12, r31
 4d6:	f0 2d       	mov	r31, r0
				}

			}

			
			old_pinb=PINB;
 4d8:	d6 b2       	in	r13, 0x16	; 22

			

			//Update Display
			LCDClear();
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	e8 dd       	rcall	.-1072   	; 0xb0 <LCDByte>
			LCDWriteString("Set Time - 00:00");
 4e0:	82 e8       	ldi	r24, 0x82	; 130
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	37 de       	rcall	.-914    	; 0x154 <LCDWriteString>
			LCDWriteStringXY(0,1," Start    ");
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	a2 de       	rcall	.-700    	; 0x230 <LCDGotoXY>
 4ec:	80 ea       	ldi	r24, 0xA0	; 160
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	31 de       	rcall	.-926    	; 0x154 <LCDWriteString>

			//Hour
			LCDWriteIntXY(11,0,hr,2);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	8f 2d       	mov	r24, r15
 4f6:	9c de       	rcall	.-712    	; 0x230 <LCDGotoXY>
 4f8:	62 e0       	ldi	r22, 0x02	; 2
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	80 2f       	mov	r24, r16
 4fe:	99 27       	eor	r25, r25
 500:	87 fd       	sbrc	r24, 7
 502:	90 95       	com	r25
 504:	36 de       	rcall	.-916    	; 0x172 <LCDWriteInt>

			//Minute
			LCDWriteIntXY(14,0,min,2);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	8e e0       	ldi	r24, 0x0E	; 14
 50a:	92 de       	rcall	.-732    	; 0x230 <LCDGotoXY>
 50c:	62 e0       	ldi	r22, 0x02	; 2
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	8c 2d       	mov	r24, r12
 512:	99 27       	eor	r25, r25
 514:	87 fd       	sbrc	r24, 7
 516:	90 95       	com	r25
 518:	2c de       	rcall	.-936    	; 0x172 <LCDWriteInt>
 51a:	42 cf       	rjmp	.-380    	; 0x3a0 <main+0x138>

0000051c <__vector_6>:

//The output compate interrupt handler
//We set up the timer in such a way that
//this ISR is called exactly at 1ms interval
ISR(TIMER1_COMPA_vect)
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	2f 93       	push	r18
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
	clock_millisecond++;
 52c:	80 91 f3 00 	lds	r24, 0x00F3
 530:	90 91 f4 00 	lds	r25, 0x00F4
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 f4 00 	sts	0x00F4, r25
 53a:	80 93 f3 00 	sts	0x00F3, r24
	if(clock_millisecond==1000)
 53e:	80 91 f3 00 	lds	r24, 0x00F3
 542:	90 91 f4 00 	lds	r25, 0x00F4
 546:	88 3e       	cpi	r24, 0xE8	; 232
 548:	93 40       	sbci	r25, 0x03	; 3
 54a:	59 f4       	brne	.+22     	; 0x562 <__vector_6+0x46>
	{
		--clock_second;
 54c:	80 91 f2 00 	lds	r24, 0x00F2
 550:	81 50       	subi	r24, 0x01	; 1
 552:	80 93 f2 00 	sts	0x00F2, r24
		clock_millisecond=0;
 556:	10 92 f4 00 	sts	0x00F4, r1
 55a:	10 92 f3 00 	sts	0x00F3, r1
		if(clock_second==-1)
 55e:	80 91 f2 00 	lds	r24, 0x00F2
				--clock_hour;
				clock_minute=59;
			}
		}
	}
}
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__divmodhi4>:
 572:	97 fb       	bst	r25, 7
 574:	07 2e       	mov	r0, r23
 576:	16 f4       	brtc	.+4      	; 0x57c <__divmodhi4+0xa>
 578:	00 94       	com	r0
 57a:	06 d0       	rcall	.+12     	; 0x588 <__divmodhi4_neg1>
 57c:	77 fd       	sbrc	r23, 7
 57e:	08 d0       	rcall	.+16     	; 0x590 <__divmodhi4_neg2>
 580:	0b d0       	rcall	.+22     	; 0x598 <__udivmodhi4>
 582:	07 fc       	sbrc	r0, 7
 584:	05 d0       	rcall	.+10     	; 0x590 <__divmodhi4_neg2>
 586:	3e f4       	brtc	.+14     	; 0x596 <__divmodhi4_exit>

00000588 <__divmodhi4_neg1>:
 588:	90 95       	com	r25
 58a:	81 95       	neg	r24
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__divmodhi4_neg2>:
 590:	70 95       	com	r23
 592:	61 95       	neg	r22
 594:	7f 4f       	sbci	r23, 0xFF	; 255

00000596 <__divmodhi4_exit>:
 596:	08 95       	ret

00000598 <__udivmodhi4>:
 598:	aa 1b       	sub	r26, r26
 59a:	bb 1b       	sub	r27, r27
 59c:	51 e1       	ldi	r21, 0x11	; 17
 59e:	07 c0       	rjmp	.+14     	; 0x5ae <__udivmodhi4_ep>

000005a0 <__udivmodhi4_loop>:
 5a0:	aa 1f       	adc	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	a6 17       	cp	r26, r22
 5a6:	b7 07       	cpc	r27, r23
 5a8:	10 f0       	brcs	.+4      	; 0x5ae <__udivmodhi4_ep>
 5aa:	a6 1b       	sub	r26, r22
 5ac:	b7 0b       	sbc	r27, r23

000005ae <__udivmodhi4_ep>:
 5ae:	88 1f       	adc	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	5a 95       	dec	r21
 5b4:	a9 f7       	brne	.-22     	; 0x5a0 <__udivmodhi4_loop>
 5b6:	80 95       	com	r24
 5b8:	90 95       	com	r25
 5ba:	bc 01       	movw	r22, r24
 5bc:	cd 01       	movw	r24, r26
 5be:	08 95       	ret

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
